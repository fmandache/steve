# Just to be backwards compatible with previous versions, this is set to "steve",
# since there might be already configured chargepoints expecting the older path.
# Otherwise, might as well be changed to something else or be left empty.
#
context.path = steve

# Database configuration
#
db.ip = localhost
db.port = 3306
db.schema = stevedb
db.user = steve
db.password = steve2025

# Credentials for Web interface access
#
auth.user = admin
auth.password = 1234

# The header key and value for Web API access using API key authorization.
# Both must be set for Web APIs to be enabled. Otherwise, we will block all calls.
#
webapi.key = STEVE-API-KEY
webapi.value =

# Jetty configuration
#
server.host = 127.0.0.1
server.gzip.enabled = true

# Jetty HTTP configuration
#
http.enabled = true
http.port = 8080

# Jetty HTTPS configuration
#
https.enabled = false
https.port = 8443
keystore.path =
keystore.password =

# OCPP 1.6 Security Profiles Configuration
# See OCPP_SECURITY_PROFILES.md for detailed configuration guide
#
# Security Profile: 0 (Unsecured), 1 (Basic Auth), 2 (TLS + Basic Auth), 3 (mTLS)
ocpp.security.profile = 0

# TLS Configuration (required for Profile 2 and 3)
ocpp.security.tls.enabled = false
ocpp.security.tls.keystore.path =
ocpp.security.tls.keystore.password =
ocpp.security.tls.keystore.type = JKS
ocpp.security.tls.truststore.path =
ocpp.security.tls.truststore.password =
ocpp.security.tls.truststore.type = JKS

# Client Certificate Authentication (required for Profile 3)
ocpp.security.tls.client.auth = false

# TLS Protocol Versions (comma-separated)
ocpp.security.tls.protocols = TLSv1.2,TLSv1.3

# TLS Cipher Suites (optional, leave empty for defaults)
ocpp.security.tls.ciphers =

# Certificate Configuration
# Certificate validity period in years (default: 1)
ocpp.security.certificate.validity.years = 2

# CSR Validation Settings
# Require Organization (O) field in CSR subject (default: false)
ocpp.security.certificate.csr.require.organization = false
# Allowed organizations (comma-separated, empty = allow all)
ocpp.security.certificate.csr.allowed.organizations =
# Require Country (C) field in CSR subject (default: false)
ocpp.security.certificate.csr.require.country = false
# Expected country code (2-letter ISO, empty = any country accepted)
ocpp.security.certificate.csr.expected.country =

# When the WebSocket/Json charge point opens more than one WebSocket connection,
# we need a mechanism/strategy to select one of them for outgoing requests.
# For allowed values see de.rwth.idsg.steve.ocpp.ws.custom.WsSessionSelectStrategyEnum.
#
ws.session.select.strategy = ALWAYS_LAST

# if BootNotification messages arrive (SOAP) or WebSocket connection attempts are made (JSON) from unknown charging
# stations, we reject these charging stations, because stations with these chargeBoxIds were NOT inserted into database
# beforehand. by setting this property to true, this behaviour can be modified to automatically insert unknown
# stations into database and accept their requests.
#
# CAUTION: setting this property to true is very dangerous, because we will accept EVERY BootNotification or WebSocket
# connection attempt from ANY sender as long as the sender knows the URL and sends a valid message.
#
auto.register.unknown.stations = false

# if this field is set, it will take precedence over the default regex we are using in
# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values
#
charge-box-id.validation.regex =

# OCPP 2.0/2.1 Configuration
# Enable OCPP 2.0 support (requires JSON schemas and message handlers)
ocpp.v20.enabled = true
# Beta testing: Comma-separated list of charge point IDs allowed to use OCPP 2.0
ocpp.v20.beta.charge-box-ids =

# OCPP 2.0 Authentication Configuration
# Authentication mode: NONE, BASIC, CERTIFICATE, COMBINED
ocpp.v20.auth.mode = BASIC
# Allow connections without authentication (for testing only)
ocpp.v20.auth.allowNoAuth = false
# Require client certificate in COMBINED mode
ocpp.v20.auth.requireCertificate = false
# Validate certificate chain
ocpp.v20.auth.validateCertificateChain = true
# Trusted networks (comma-separated CIDR notation) - bypass authentication
ocpp.v20.auth.trustedNetworks = 127.0.0.1/32,::1/128
# IP whitelist (comma-separated patterns, supports wildcards)
ocpp.v20.auth.ipWhitelist =
# IP blacklist (comma-separated patterns, supports wildcards)
ocpp.v20.auth.ipBlacklist =

# Gateway configuration (OCPI/OICP roaming protocols)
# IMPORTANT: When enabling gateway, you MUST set both encryption.key and encryption.salt to secure random values
#
steve.gateway.enabled = true
steve.gateway.encryption.key = 5t0a4IRDQ7nOKSwGYIsTjRzATiK5jonTs/7cEaPsPwQ=
steve.gateway.encryption.salt = 1qNIcsGnVAfqyNxpZooumA==

# OCPI Configuration
steve.gateway.ocpi.enabled = false
steve.gateway.ocpi.version = 2.2
steve.gateway.ocpi.country-code =
steve.gateway.ocpi.party-id =
steve.gateway.ocpi.base-url =
steve.gateway.ocpi.authentication.token =
steve.gateway.ocpi.currency = EUR
steve.gateway.ocpi.currency-conversion.enabled = false
steve.gateway.ocpi.currency-conversion.api-key =
steve.gateway.ocpi.currency-conversion.api-url = https://api.exchangerate-api.com/v4/latest/

# OICP Configuration
steve.gateway.oicp.enabled = false
steve.gateway.oicp.version = 2.3
steve.gateway.oicp.provider-id =
steve.gateway.oicp.base-url =
steve.gateway.oicp.authentication.token =
steve.gateway.oicp.currency = EUR

### DO NOT MODIFY ###
db.sql.logging = false
profile = prod
